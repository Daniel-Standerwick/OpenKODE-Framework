/* -----------------------------------------------------------------------------------
 *
 *      File            CCBReader.h
 *      Ported By       Young-Hwan Mun
 *      Contact         xmsoft77@gmail.com 
 * 
 * -----------------------------------------------------------------------------------
 *   
 *      Copyright (c) 2010-2014 XMSoft
 *      Copyright (c) 2010-2013 cocos2d-x.org
 *
 *         http://www.cocos2d-x.org      
 *
 * -----------------------------------------------------------------------------------
 * 
 *     Permission is hereby granted, free of charge, to any person obtaining a copy
 *     of this software and associated documentation files (the "Software"), to deal
 *     in the Software without restriction, including without limitation the rights
 *     to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *     copies of the Software, and to permit persons to whom the Software is
 *     furnished to do so, subject to the following conditions:
 *
 *     The above copyright notice and this permission notice shall be included in
 *     all copies or substantial portions of the Software.
 *     
 *     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *     IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *     FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *     AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *     LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *     OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *     THE SOFTWARE.
 *
 * --------------------------------------------------------------------------------- */

#ifndef __CCBReader_h__
#define __CCBReader_h__

#include <string>
#include <vector>
#include "CCBSequence.h"
#include "../../base/CCDictionary.h"
#include "../../2d/base_nodes/CCNode.h"
#include "../../2d/layers_scenes_transitions_nodes/CCScene.h"
#include "../../extensions/GUI/CCControlExtension/CCControl.h"

#define CCB_STATIC_NEW_AUTORELEASE_OBJECT_METHOD(T, METHOD)				\
static T* METHOD ( KDvoid ) {											\
    T* ptr = new T ( );													\
    if ( ptr != KD_NULL ) {												\
        ptr->autorelease ( );											\
        return ptr;														\
    }																	\
    CC_SAFE_DELETE ( ptr );												\
    return KD_NULL;														\
}

#define CCB_STATIC_NEW_AUTORELEASE_OBJECT_WITH_INIT_METHOD(T, METHOD)	\
static T* METHOD ( KDvoid ) {											\
    T* ptr = new T ( );													\
    if ( ptr != KD_NULL && ptr->init ( ) ) {							\
        ptr->autorelease ( );											\
        return ptr;														\
    }																	\
    CC_SAFE_DELETE ( ptr );												\
    return KD_NULL;														\
}

#define CCB_VERSION				5

namespace cocosbuilder {

/**
 *	@addtogroup cocosbuilder
 *	@{
 */

class CCBFile : public cocos2d::Node
{
	private :

		cocos2d::Node*			m_pCCBFileNode;
    
	public : 

		CCBFile ( KDvoid );
    
		static CCBFile*			create ( KDvoid );
    
		cocos2d::Node*			getCCBFileNode ( KDvoid );
		KDvoid					setCCBFileNode ( Node* pNode );			// retain
};

/* Forward declaration. */
class NodeLoader;
class NodeLoaderLibrary;
class NodeLoaderListener;
class CCBMemberVariableAssigner;
class CCBSelectorResolver;
class CCBAnimationManager;
class CCBKeyframe;

/**
 *	@brief Parse CCBI file which is generated by CocosBuilder
 */
class CCBReader : public cocos2d::Object 
{
	public :

		enum class PropertyType 
		{
			POSITION = 0,
			SIZE,
			POINT,
			POINT_LOCK,
			SCALE_LOCK,
			DEGREES,
			INTEGER,
			FLOAT,
			FLOAT_VAR,
			CHECK,
			SPRITEFRAME,
			TEXTURE,
			BYTE,
			COLOR3,
			COLOR4F_VAR,
			FLIP,
			BLEND_MODE,
			FNT_FILE,
			TEXT,
			FONT_TTF,
			INTEGER_LABELED,
			BLOCK,
			ANIMATION,
			CCB_FILE,
			STRING,
			BLOCK_CONTROL,
			FLOAT_SCALE,
			FLOAT_XY
		};
    
		enum class FloatType 
		{
			_0 = 0,
			_1,
			MINUS1,
			_05,
			INTEGER,
			FULL
		};
    
		enum class PlatformType 
		{
			ALL = 0,
			IOS,
			MAC
		};
    
		enum class TargetType 
		{
			NONE = 0,
			DOCUMENT_ROOT = 1,
			OWNER = 2,
		};
    
		enum class PositionType
		{
			RELATIVE_BOTTOM_LEFT,
			RELATIVE_TOP_LEFT,
			RELATIVE_TOP_RIGHT,
			RELATIVE_BOTTOM_RIGHT,
			PERCENT,
			MULTIPLY_RESOLUTION,
		};
    
		enum class SizeType
		{
			ABSOLUTE,
			PERCENT,
			RELATIVE_CONTAINER,
			HORIZONTAL_PERCENT,
			VERTICAL_PERCENT,
			MULTIPLY_RESOLUTION,
		};
    
		enum class ScaleType
		{
			ABSOLUTE,
			MULTIPLY_RESOLUTION
		};

		/**
		 *	@js NA
		 *	@lua NA
		 */
		CCBReader ( NodeLoaderLibrary* pNodeLoaderLibrary, CCBMemberVariableAssigner* pCCBMemberVariableAssigner = KD_NULL, CCBSelectorResolver* pCCBSelectorResolver = KD_NULL, NodeLoaderListener* pNodeLoaderListener = KD_NULL );

		/**
		 *	@js NA
		 *	@lua NA
		 */
		CCBReader ( CCBReader* ccbReader );
		
		/**
		 *	@js NA
		 *	@lua NA
		 */
		virtual ~CCBReader ( KDvoid );

		/**
		 *	@js NA
		 *	@lua NA
		 */
		CCBReader ( KDvoid );
   
		KDvoid						setCCBRootPath ( const KDchar* ccbRootPath );
		const std::string&			getCCBRootPath ( KDvoid ) const;

		cocos2d::Node*				readNodeGraphFromFile ( const KDchar* pCCBFileName );
		cocos2d::Node*				readNodeGraphFromFile ( const KDchar* pCCBFileName, cocos2d::Object* pOwner );
		cocos2d::Node*				readNodeGraphFromFile ( const KDchar* pCCBFileName, cocos2d::Object* pOwner, const cocos2d::Size& tParentSize );

		/**
		 *	@js NA
		 *	@lua NA
		 */
		cocos2d::Node*				readNodeGraphFromData ( cocos2d::Data* pData, cocos2d::Object* pOwner, const cocos2d::Size& tParentSize );
	
		/**
		 *	@lua NA
		 */
		cocos2d::Scene*				createSceneWithNodeGraphFromFile ( const KDchar* pCCBFileName );
		
		/**
		 *	@lua NA
		 */
		cocos2d::Scene*				createSceneWithNodeGraphFromFile ( const KDchar* pCCBFileName, cocos2d::Object* pOwner );
		
		/** 
		 *	@lua NA
		 */
		cocos2d::Scene*				createSceneWithNodeGraphFromFile ( const KDchar* pCCBFileName, cocos2d::Object* pOwner, const cocos2d::Size& tParentSize );
    
		/**
		 *	@js NA
		 *	@lua NA
		 */
		CCBMemberVariableAssigner*	getCCBMemberVariableAssigner ( KDvoid );

		/**
		 *	@js NA
		 *	@lua NA
		 */
		CCBSelectorResolver*		getCCBSelectorResolver ( KDvoid );
    
		/**
		 *	@js getActionManager
		 *	@lua getActionManager
		 */
		CCBAnimationManager*		getAnimationManager ( KDvoid );

		/**
		 *	@js setActionManager
		 *	@lua setActionManager
		 */
		KDvoid						setAnimationManager ( CCBAnimationManager* pAnimationManager );
    
		/**
		 *	Used in NodeLoader::parseProperties()
		 *	@js NA
		 *	@lua NA
		 */
		std::set<std::string>*		getAnimatedProperties ( KDvoid );

		/**
		 *	@js NA
		 *	@lua NA
		 */
		std::set<std::string>&		getLoadedSpriteSheet ( KDvoid );
		
		/**
		 *	@js NA
		 *	@lua NA
		 */
		cocos2d::Object*			getOwner ( KDvoid );

		/**
		 *	Utility methods. 
		 *	@js NA
		 *	@lua NA
		 */
		static std::string			lastPathComponent ( const KDchar* pString );
		
		/**
		 *	@js NA
		 *	@lua NA
		 */
		static std::string			deletePathExtension ( const KDchar* pString );

		/**
		 *	@js NA
		 *	@lua NA
		 */
		static std::string			toLowerCase ( const KDchar* pString );
		
		/**
		 *	@js NA
		 *	@lua NA
		 */
		static KDbool				endsWith ( const KDchar* pString, const KDchar* pEnding );

		/**
		 *	Parse methods. 
		 *	@js NA
		 *	@lua NA
		 */
		KDint						readInt ( KDbool pSigned );

		/**
		 *	@js NA
		 *	@lua NA
		 */
		KDubyte						readByte ( KDvoid );

		/**
		 *	@js NA
		 *	@lua NA
		 */
		KDbool						readBool ( KDvoid );

		std::string					readUTF8 ( KDvoid );
		
		/**
		 *	@js NA
		 *	@lua NA
		 */
		KDfloat						readFloat ( KDvoid );

		/**
		 *	@js NA
		 *	@lua NA
		 */
		std::string					readCachedString ( KDvoid );

		/**
		 *	@js NA
		 *	@lua NA
		 */
		KDbool						isJSControlled ( KDvoid );
    
		KDbool						readCallbackKeyframesForSeq ( CCBSequence* pSeq );
		KDbool						readSoundKeyframesForSeq ( CCBSequence* pSeq );
    
		cocos2d::Array*				getOwnerCallbackNames ( KDvoid );
		cocos2d::Array*				getOwnerCallbackNodes ( KDvoid );
		cocos2d::Array*				getOwnerCallbackControlEvents ( KDvoid );
    
		cocos2d::Array*				getOwnerOutletNames ( KDvoid );
		cocos2d::Array*				getOwnerOutletNodes ( KDvoid );
		cocos2d::Array*				getNodesWithAnimationManagers ( KDvoid );
		cocos2d::Array*				getAnimationManagersForNodes ( KDvoid );
		
		/**
		 *	@js NA
		 *	@lua NA
		 */
		cocos2d::Dictionary*		getAnimationManagers ( KDvoid );

		/**
		 *	@js NA
		 *	@lua NA
		 */
		KDvoid						setAnimationManagers ( cocos2d::Dictionary* x );  // weak reference
		
		/**
		 *	@js NA
		 *	@lua NA
		 */
		KDvoid						addOwnerCallbackName ( const std::string& sName );
		
		/**
		 *	@js NA
		 *	@lua NA
		 */
		KDvoid						addOwnerCallbackNode ( cocos2d::Node* pNode );
		KDvoid						addOwnerCallbackControlEvents ( cocos2d::extension::Control::EventType eType );
		
		/**
		 *	@js NA
		 *	@lua NA
		 */
		KDvoid						addDocumentCallbackName ( const std::string& sName );
		
		/**
		 *	@js NA
		 *	@lua NA
		 */
		KDvoid						addDocumentCallbackNode ( cocos2d::Node* pNode );
		KDvoid						addDocumentCallbackControlEvents ( cocos2d::extension::Control::EventType eEventType );

		/**
		 *	@js NA
		 *	@lua NA
		 */
		static KDfloat				getResolutionScale ( KDvoid );
		static KDvoid				setResolutionScale ( KDfloat fScale );
		
		/**
		 *	@js NA
		 *	@lua NA
		 */
		cocos2d::Node*				readFileWithCleanUp ( KDbool bCleanUp, cocos2d::Dictionary* am );
    
		KDvoid						addOwnerOutletName ( std::string sName );
		KDvoid						addOwnerOutletNode ( cocos2d::Node* pNode );

	private :

		KDvoid						cleanUpNodeGraph ( cocos2d::Node* pNode );
		KDbool						readSequences ( KDvoid );
		CCBKeyframe*				readKeyframe ( PropertyType eType );
    
		KDbool						readHeader ( KDvoid );
		KDbool						readStringCache ( KDvoid );

		cocos2d::Node*				readNodeGraph ( KDvoid );
		cocos2d::Node*				readNodeGraph ( cocos2d::Node* pParent );

		KDbool						getBit ( KDvoid );
		KDvoid						alignBits ( KDvoid );

		KDbool						init ( KDvoid );
    
		friend class NodeLoader;

	private :

		cocos2d::Data*				m_pData;
		KDubyte*					m_pBytes;
		KDint						m_nCurrentByte;
		KDint						m_nCurrentBit;
    
		std::vector<std::string>	m_aStringCache;
		std::set<std::string>		m_aLoadedSpriteSheets;
    
		cocos2d::Object*			m_pOwner;
    
		CCBAnimationManager*		m_pActionManager; //retain
		cocos2d::Dictionary*		m_pActionManagers;
    
		std::set<std::string>*		m_pAnimatedProps;
    
		NodeLoaderLibrary*			m_pNodeLoaderLibrary;
		NodeLoaderListener*			m_pNodeLoaderListener;
		CCBMemberVariableAssigner*	m_pCCBMemberVariableAssigner;
		CCBSelectorResolver*		m_pCCBSelectorResolver;
    
		std::vector<std::string>	m_aOwnerOutletNames;
		cocos2d::Array*				m_pOwnerOutletNodes;
		cocos2d::Array*				m_pNodesWithAnimationManagers;
		cocos2d::Array*				m_pAnimationManagersForNodes;
    
		std::vector<std::string>	m_sOwnerCallbackNames;
		cocos2d::Array*				m_pOwnerCallbackNodes;
		cocos2d::Array*				m_pOwnerOwnerCallbackControlEvents;
		std::string					m_sCCBRootPath;
    
		KDbool						m_bJsControlled;
};

//	end of effects group
/// @}

}

#endif	// __CCBReader_h__
